rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
             request.auth.token.email == 'yadvader88@gmail.com';
    }

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Helper function to check if user is verified
    function isVerified() {
      return request.auth != null && request.auth.token.email_verified == true;
    }

    // Helper function to check if this is a new user document
    function isNewUser(email) {
      return !exists(/databases/$(database)/documents/userLimits/$(email));
    }

    // TempUsers collection rules
    match /tempUsers/{userId} {
      allow read: if true;
      allow create: if true;
      allow update, delete: if isAuthenticated();
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isVerified() && (request.auth.uid == userId || isAdmin());
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
    }

    // UserLimits collection rules
    match /userLimits/{email} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isVerified() && (request.auth.token.email == email || isAdmin());
      allow update, delete: if isAdmin();
    }

    // Message counts collection rules
    match /messageCounts/{email} {
      allow read: if isAuthenticated() && (request.auth.token.email == email || isAdmin());
      allow create: if isAuthenticated() && isVerified() && (request.auth.token.email == email || isAdmin());
      allow update: if isAuthenticated() && (request.auth.token.email == email || isAdmin());
      allow delete: if isAdmin();
    }

    // Chat history rules - matches the structure in chatService.js
    match /chats/{userId}/{agentType}/{messageId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId) || isAdmin();
    }

    // Allow admin to read and write to all collections
    match /{collection}/{document=**} {
      allow read, write: if isAdmin();
    }
  }
} 